CodeNova Project File Structure
================================

CodeNova/
├── docker-compose.yml                    # Docker Compose configuration for services
├── postgres-config/                      # PostgreSQL configuration directory
│   └── pg_hba.conf                      # PostgreSQL host-based authentication config
└── backend/                             # Backend application directory
    ├── requirements.txt                  # Python dependencies
    ├── app/                             # Main application package
    │   ├── __init__.py                  # Package initialization
    │   ├── main.py                      # FastAPI application entry point
    │   ├── api/                         # API layer
    │   │   ├── __init__.py
    │   │   ├── deps.py                  # Dependency injection utilities
    │   │   ├── schemas.py               # API schemas
    │   │   └── v1/                      # API version 1
    │   │       ├── __init__.py
    │   │       ├── router.py            # Main API router
    │   │       └── endpoints/           # API endpoints
    │   │           ├── __init__.py
    │   │           ├── analysis.py      # Code analysis endpoints
    │   │           ├── repository.py    # Repository management endpoints
    │   │           ├── review.py        # Code review endpoints
    │   │           └── users.py         # User management endpoints
    │   ├── core/                        # Core application configuration
    │   │   ├── __init__.py
    │   │   ├── config.py                # Application configuration
    │   │   ├── database.py              # Database configuration
    │   │   └── security.py              # Security utilities
    │   ├── db/                          # Database layer
    │   │   ├── __init__.py
    │   │   ├── models.py                # Database models
    │   │   └── session.py               # Database session management
    │   ├── models/                      # Domain models
    │   │   ├── __init__.py
    │   │   ├── feedback.py              # Feedback model
    │   │   ├── repository.py            # Repository model
    │   │   ├── review.py                # Review model
    │   │   └── users.py                 # User model
    │   ├── schemas/                     # Pydantic schemas
    │   │   ├── __init__.py
    │   │   ├── core_schemas.py          # Core schemas (auth, etc.)
    │   │   ├── feedback.py              # Feedback schemas
    │   │   ├── repository.py            # Repository schemas
    │   │   ├── review.py                # Review schemas
    │   │   └── users.py                 # User schemas
    │   ├── services/                    # Business logic services
    │   │   ├── __init__.py
    │   │   ├── ai_service.py            # AI/ML service integration
    │   │   ├── analysis_service.py      # Code analysis service
    │   │   └── learning_service.py      # Learning/ML service
    │   └── utils/                       # Utility functions
    │       ├── __init__.py
    │       ├── ast_parser.py            # Abstract Syntax Tree parser
    │       └── helpers.py               # Helper utilities
    └── conda_env/                       # Conda environment (Python packages)
        ├── Scripts/                     # Executable scripts
        ├── Lib/                         # Python libraries
        │   └── site-packages/           # Installed packages
        ├── include/                     # Header files
        ├── Library/                     # Additional libraries
        └── [other conda environment files]

Key Components:
---------------
1. **API Layer** (api/): RESTful API endpoints and routing
2. **Core** (core/): Application configuration and security
3. **Database** (db/): Database models and session management
4. **Models** (models/): Domain models for business logic
5. **Schemas** (schemas/): Pydantic schemas for data validation
6. **Services** (services/): Business logic and external service integration
7. **Utils** (utils/): Helper functions and utilities

Architecture Pattern:
--------------------
- **FastAPI** web framework
- **SQLAlchemy** ORM for database operations
- **Pydantic** for data validation and serialization
- **Dependency Injection** pattern for clean architecture
- **Repository Pattern** for data access
- **Service Layer** for business logic separation

Main Features:
--------------
- User management and authentication
- Repository management
- Code analysis and review
- AI/ML service integration
- Feedback system
- Learning capabilities
